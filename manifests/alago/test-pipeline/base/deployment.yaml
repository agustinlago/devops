apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: test
    app.kubernetes.io/component: test
    app.kubernetes.io/instance: test
  name: test
spec:
  selector:
    matchLabels:
      deployment: test
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        deployment: test
    spec:
      containers:
      - image: <PATCH_ME>
        imagePullPolicy: IfNotPresent
        #livenessProbe:
        #  failureThreshold: 3
        #  httpGet:
        #    path: /health
        #   port: 8080
        #    scheme: HTTP
        #  periodSeconds: 10
        #  successThreshold: 1
        #  timeoutSeconds: 1
        name: test
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        - containerPort: 8778
          protocol: TCP
        env:            
            - name: PROFILE
              value: openshift
            - name: TZ
              value: America/Argentina/Buenos_Aires
            - name: JAVA_OPTIONS
              value: >-
                -Xms512M -Xmx2048M -server -XX:+UseParallelGC -XX:PermSize=64M
                -XX:MaxPermSize=1024M
            - name: GC_MAX_METASPACE_SIZE
              value: '512'
            - name: GC_METASPACE_SIZE
              value: '192'
            - name: SHOW_SQL
              value: 'false'
            - name: LOG_ORG
              value: INFO
            - name: LOG_COM
              value: INFO
        #readinessProbe:
        #  failureThreshold: 3
        #  httpGet:
        #    path: /health
        #    port: 8080
        #    scheme: HTTP
        #  periodSeconds: 10
        #  successThreshold: 1
        #  timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 512Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
